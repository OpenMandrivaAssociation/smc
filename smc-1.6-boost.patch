--- smc-1.6/src/core/game_core.cpp	2008-09-26 11:55:50.000000000 -0700
+++ smc-1.6/src/core/game_core.cpp.new	2008-10-02 16:21:57.000000000 -0700
@@ -1577,32 +1577,32 @@
 			if( fs::is_directory( *dir_itr ) )
 			{
 				// ignore hidden directories
-				if( dir_itr->leaf().find( "." ) == 0 )
+				if( dir_itr->path().leaf().find( "." ) == 0 )
 				{
 					continue;
 				}
 
 				if( with_directories )
 				{
-					valid_files.push_back( dir + "/" + dir_itr->leaf() );
+					valid_files.push_back( dir + "/" + dir_itr->path().leaf() );
 				}
 
 				// load all items from the sub-directory
 				if( search_in_sub_directories )
 				{
-					vector<std::string> new_valid_files = Get_Directory_Files( dir + "/" + dir_itr->leaf(), file_type, with_directories );
+					vector<std::string> new_valid_files = Get_Directory_Files( dir + "/" + dir_itr->path().leaf(), file_type, with_directories );
 					valid_files.insert( valid_files.end(), new_valid_files.begin(), new_valid_files.end() );
 				}
 			}
 			// valid file
-			else if( file_type.empty() || dir_itr->leaf().rfind( file_type ) != string::npos )
+			else if( file_type.empty() || dir_itr->path().leaf().rfind( file_type ) != string::npos )
 			{
-				valid_files.push_back( dir + "/" + dir_itr->leaf() );
+				valid_files.push_back( dir + "/" + dir_itr->path().leaf() );
 			}
 		}
 		catch( const std::exception &ex )
 		{
-			printf( "%s %s\n", dir_itr->leaf().c_str(), ex.what() );
+			printf( "%s %s\n", dir_itr->path().leaf().c_str(), ex.what() );
 		}
 	}
 
--- smc-1.6/src/overworld/world_manager.cpp	2008-07-01 14:11:12.000000000 -0700
+++ smc-1.6/src/overworld/world_manager.cpp.new	2008-10-02 16:25:59.000000000 -0700
@@ -111,7 +111,7 @@
 	{
 		try
 		{
-			string current_dir = dir_itr->leaf();
+			string current_dir = dir_itr->path().leaf();
 
 			// only directories with an existing description
 			if( fs::is_directory( *dir_itr ) && File_Exists( dir + "/" + current_dir + "/description.xml" ) )
@@ -138,7 +138,7 @@
 		}
 		catch( const std::exception &ex )
 		{
-			printf( "%s %s\n", dir_itr->leaf().c_str(), ex.what() );
+			printf( "%s %s\n", dir_itr->path().leaf().c_str(), ex.what() );
 		}
 	}
 }
